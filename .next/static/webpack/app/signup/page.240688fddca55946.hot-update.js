"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/signup/page",{

/***/ "(app-pages-browser)/./src/utils/auth.ts":
/*!***************************!*\
  !*** ./src/utils/auth.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminSupabase: function() { return /* binding */ adminSupabase; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   clearSession: function() { return /* binding */ clearSession; },\n/* harmony export */   endSession: function() { return /* binding */ endSession; },\n/* harmony export */   generateToken: function() { return /* binding */ generateToken; },\n/* harmony export */   getSession: function() { return /* binding */ getSession; },\n/* harmony export */   saveSession: function() { return /* binding */ saveSession; },\n/* harmony export */   signIn: function() { return /* binding */ signIn; },\n/* harmony export */   signOut: function() { return /* binding */ signOut; },\n/* harmony export */   signUp: function() { return /* binding */ signUp; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; },\n/* harmony export */   validateSession: function() { return /* binding */ validateSession; },\n/* harmony export */   verifyAdmin: function() { return /* binding */ verifyAdmin; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _fingerprint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fingerprint */ \"(app-pages-browser)/./src/utils/fingerprint.ts\");\n\n\n\n// Create a Supabase client with the service role key for admin operations\nconst serviceRoleKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjeHh2bmljemx5enl1bXVpb2hjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMjM1MDMwMywiZXhwIjoyMDQ3OTI2MzAzfQ.50LNYYbfszw6IzHma3S6SIL53ZGFfVpj0Ty1x3ycj0o\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://scxxvniczlyzyumuiohc.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjeHh2bmljemx5enl1bXVpb2hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIzNTAzMDMsImV4cCI6MjA0NzkyNjMwM30.AM5S6xAISMEH41V7pLsJSznd-b2hiene5ZGOClgZh-4\");\n// Create a separate client with service role for session management\nconst adminSupabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://scxxvniczlyzyumuiohc.supabase.co\", serviceRoleKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Function to create a new session\nasync function createSession(userId, deviceFingerprint) {\n    try {\n        console.log(\"Creating new session for user:\", userId);\n        const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        // First, deactivate any existing sessions using admin client\n        const { error: deactivateError } = await adminSupabase.from(\"sessions\").update({\n            is_active: false\n        }).eq(\"user_id\", userId).eq(\"is_active\", true);\n        if (deactivateError) {\n            console.error(\"Error deactivating existing sessions:\", deactivateError);\n        }\n        // Create new session using admin client\n        const { error: createError } = await adminSupabase.from(\"sessions\").insert([\n            {\n                user_id: userId,\n                session_id: sessionId,\n                device_fingerprint: deviceFingerprint,\n                is_active: true,\n                created_at: new Date().toISOString(),\n                last_active: new Date().toISOString()\n            }\n        ]);\n        if (createError) {\n            console.error(\"Error creating session:\", createError);\n            throw new Error(\"Failed to create session\");\n        }\n        console.log(\"Successfully created session with ID:\", sessionId);\n        return sessionId;\n    } catch (error) {\n        console.error(\"Session creation error:\", error);\n        throw error;\n    }\n}\n// Function to check if user has an active session\nasync function checkActiveSession(userId) {\n    const { data: sessions, error } = await supabase.from(\"sessions\").select(\"*\").eq(\"user_id\", userId).eq(\"is_active\", true).single();\n    if (error) {\n        console.error(\"Error checking active session:\", error);\n        return false;\n    }\n    return !!sessions;\n}\n// Function to validate session\nasync function validateSession(sessionId, userId) {\n    try {\n        console.log(\"Validating session:\", {\n            sessionId,\n            userId\n        });\n        // Use admin client for session validation\n        const { data: session, error } = await adminSupabase.from(\"sessions\").select(\"*\").eq(\"session_id\", sessionId).eq(\"user_id\", userId).eq(\"is_active\", true).single();\n        if (error) {\n            console.error(\"Session validation error:\", error);\n            return false;\n        }\n        if (!session) {\n            console.log(\"No active session found\");\n            return false;\n        }\n        console.log(\"Found active session:\", session);\n        // Update last_active timestamp using admin client\n        const { error: updateError } = await adminSupabase.from(\"sessions\").update({\n            last_active: new Date().toISOString()\n        }).eq(\"session_id\", sessionId).eq(\"user_id\", userId);\n        if (updateError) {\n            console.error(\"Error updating last_active:\", updateError);\n        // Don't fail validation just because we couldn't update timestamp\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Unexpected error in validateSession:\", error);\n        return false;\n    }\n}\n// Function to end session\nasync function endSession(sessionId) {\n    await adminSupabase.from(\"sessions\").update({\n        is_active: false\n    }).eq(\"session_id\", sessionId);\n}\nasync function signIn(username, password) {\n    try {\n        console.log(\"Starting sign in process for username:\", username);\n        // Get current device fingerprint\n        const deviceFingerprint = await (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.getDeviceFingerprint)();\n        console.log(\"Device fingerprint:\", deviceFingerprint);\n        // Check if this is an admin login attempt\n        if (username === \"Bharani\") {\n            if (password === \"HackerBharani\") {\n                const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n                const adminSession = {\n                    username: username,\n                    isLoggedIn: true,\n                    isAdmin: true,\n                    deviceFingerprint,\n                    sessionId,\n                    userId: \"admin\" // Special case for admin\n                };\n                saveSession(adminSession);\n                return adminSession;\n            }\n            throw new Error(\"Invalid username or password\");\n        }\n        // Normal user authentication\n        const { data: userData, error: userError } = await supabase.from(\"users\").select(\"*\").eq(\"username\", username).single();\n        if (userError || !userData) {\n            console.error(\"User lookup error:\", userError);\n            throw new Error(\"Invalid username or password\");\n        }\n        // Create new session\n        let sessionId;\n        try {\n            sessionId = await createSession(userData.id, deviceFingerprint);\n            console.log(\"Created new session:\", sessionId);\n        } catch (error) {\n            console.error(\"Failed to create session:\", error);\n            throw new Error(\"Failed to create session. Please try again.\");\n        }\n        const userSession = {\n            username: userData.username,\n            userId: userData.id,\n            isLoggedIn: true,\n            sessionId,\n            token: userData.token,\n            deviceFingerprint,\n            isAdmin: false\n        };\n        console.log(\"Saving user session:\", {\n            ...userSession,\n            token: \"[REDACTED]\"\n        });\n        saveSession(userSession);\n        return userSession;\n    } catch (error) {\n        console.error(\"Sign in error:\", error);\n        throw error;\n    }\n}\nasync function signUp(username, password, token) {\n    try {\n        console.log(\"Starting sign up process for username:\", username);\n        // Get device fingerprint\n        const deviceFingerprint = await (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.getDeviceFingerprint)();\n        console.log(\"Generated device fingerprint:\", deviceFingerprint);\n        // Check if username already exists\n        const { data: existingUser, error: userCheckError } = await supabase.from(\"users\").select(\"username\").eq(\"username\", username).single();\n        if (userCheckError) {\n            console.error(\"Error checking existing user:\", userCheckError);\n        }\n        if (existingUser) {\n            throw new Error(\"Username already exists\");\n        }\n        // Verify token exists and get expiry date\n        const { data: tokenData, error: tokenError } = await supabase.from(\"tokens\").select(\"*\").eq(\"token\", token).single();\n        if (tokenError) {\n            console.error(\"Token verification error:\", tokenError);\n            throw new Error(\"Invalid token\");\n        }\n        if (!tokenData) {\n            throw new Error(\"Invalid token\");\n        }\n        // Check if token is already used\n        if (tokenData.is_used) {\n            throw new Error(\"Token has already been used\");\n        }\n        // Create new user with device fingerprint\n        const newUserData = {\n            username,\n            password,\n            token,\n            device_fingerprint: deviceFingerprint,\n            created_at: new Date().toISOString(),\n            token_expiry: tokenData.expiry_date\n        };\n        console.log(\"Attempting to create user with data:\", {\n            ...newUserData,\n            password: \"[REDACTED]\",\n            token: \"[REDACTED]\"\n        });\n        const { data: newUser, error: createError } = await supabase.from(\"users\").insert([\n            newUserData\n        ]).select().single();\n        if (createError) {\n            console.error(\"Detailed error creating user:\", {\n                message: createError.message,\n                details: createError.details,\n                hint: createError.hint,\n                code: createError.code\n            });\n            throw new Error(\"Failed to create user account: \".concat(createError.message));\n        }\n        // Mark token as used\n        const { error: updateError } = await supabase.from(\"tokens\").update({\n            is_used: true,\n            used_by: username\n        }).eq(\"token\", token);\n        if (updateError) {\n            console.error(\"Error updating token status:\", updateError);\n        // Consider rolling back user creation here\n        }\n        console.log(\"Successfully created user:\", {\n            ...newUser,\n            password: \"[REDACTED]\",\n            token: \"[REDACTED]\"\n        });\n        return {\n            user: newUser,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Sign up error:\", error);\n        throw error;\n    }\n}\nasync function signOut() {\n    try {\n        const session = getSession();\n        if ((session === null || session === void 0 ? void 0 : session.sessionId) && (session === null || session === void 0 ? void 0 : session.userId)) {\n            // Use admin client for session termination\n            const { error } = await adminSupabase.from(\"sessions\").update({\n                is_active: false\n            }).eq(\"session_id\", session.sessionId).eq(\"user_id\", session.userId);\n            if (error) {\n                console.error(\"Error ending session:\", error);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error during sign out:\", error);\n    } finally{\n        clearSession();\n    }\n}\nfunction saveSession(user) {\n    try {\n        localStorage.setItem(\"session\", JSON.stringify(user));\n    } catch (error) {\n        console.error(\"Error saving session:\", error);\n    }\n}\nfunction getSession() {\n    try {\n        const session = localStorage.getItem(\"session\");\n        if (!session) return null;\n        return JSON.parse(session);\n    } catch (error) {\n        console.error(\"Error reading session:\", error);\n        return null;\n    }\n}\nfunction clearSession() {\n    localStorage.removeItem(\"session\");\n}\nasync function checkSession() {\n    const session = getSession();\n    if (!session || !session.isLoggedIn) return null;\n    // Check if this is an admin session\n    if (session.isAdmin) {\n        if (session.username === \"Bharani\") {\n            return session;\n        }\n        clearSession();\n        return null;\n    }\n    try {\n        // Get user data\n        const { data: userData, error: userError } = await supabase.from(\"users\").select(\"*\").eq(\"username\", session.username).single();\n        if (userError || !userData) {\n            clearSession();\n            throw new Error(\"User not found or access revoked\");\n        }\n        // Get token data\n        const { data: tokenData, error: tokenError } = await supabase.from(\"tokens\").select(\"*\").eq(\"token\", userData.token).single();\n        if (tokenError || !tokenData) {\n            clearSession();\n            throw new Error(\"Invalid token. Please contact admin.\");\n        }\n        // Check if token is expired\n        const expiryDate = new Date(tokenData.expiry_date);\n        if (expiryDate < new Date()) {\n            clearSession();\n            throw new Error(\"Your access token has expired. Please contact admin for renewal.\");\n        }\n        // Check if token is still active\n        if (!tokenData.is_used) {\n            clearSession();\n            throw new Error(\"Your token has been deactivated. Please contact admin to reactivate.\");\n        }\n        // Validate session\n        if (!session.sessionId || !session.userId) {\n            clearSession();\n            throw new Error(\"Invalid session data. Please sign in again.\");\n        }\n        const isValidSession = await validateSession(session.sessionId, session.userId);\n        if (!isValidSession) {\n            clearSession();\n            throw new Error(\"Invalid session. Please sign in again.\");\n        }\n        // Return the complete session data\n        return {\n            username: session.username,\n            userId: session.userId,\n            isLoggedIn: true,\n            isAdmin: false,\n            token: userData.token,\n            sessionId: session.sessionId,\n            deviceFingerprint: session.deviceFingerprint\n        };\n    } catch (error) {\n        // Clear session for any authentication-related errors\n        if (error.message.includes(\"token\") || error.message.includes(\"access\") || error.message.includes(\"session\")) {\n            clearSession();\n        }\n        throw error;\n    }\n}\nfunction generateToken() {\n    let duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1h\";\n    // Generate a unique token using UUID\n    return (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n}\nasync function verifyAdmin() {\n    const adminSession = localStorage.getItem(\"adminSession\");\n    if (!adminSession) return false;\n    try {\n        const session = JSON.parse(adminSession);\n        return session.username === \"Bharani\" && session.isLoggedIn === true;\n    } catch (error) {\n        console.error(\"Error verifying admin session:\", error);\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UUFDdEQsSUFBSUEsTUFBTWlELE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQyxZQUFZcEUsTUFBTWlELE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQyxhQUFhcEUsTUFBTWlELE9BQU8sQ0FBQ21CLFFBQVEsQ0FBQyxZQUFZO1lBQzVHWDtRQUNGO1FBQ0EsTUFBTXpEO0lBQ1I7QUFDRjtBQUVPLFNBQVNxRTtRQUFjQyxXQUFBQSxpRUFBbUI7SUFDL0MscUNBQXFDO0lBQ3JDLE9BQU96RixnREFBTUE7QUFDZjtBQUVPLGVBQWUwRjtJQUNwQixNQUFNekMsZUFBZTRCLGFBQWFJLE9BQU8sQ0FBQztJQUMxQyxJQUFJLENBQUNoQyxjQUFjLE9BQU87SUFFMUIsSUFBSTtRQUNGLE1BQU1SLFVBQVVzQyxLQUFLRyxLQUFLLENBQUNqQztRQUMzQixPQUFPUixRQUFRSSxRQUFRLEtBQUsxQyxTQUFzQyxJQUFJc0MsUUFBUVMsVUFBVSxLQUFLO0lBQy9GLEVBQUUsT0FBTy9CLE9BQU87UUFDZEgsUUFBUUcsS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsT0FBTztJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2F1dGgudHM/ZmQyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBnZXREZXZpY2VGaW5nZXJwcmludCB9IGZyb20gJy4vZmluZ2VycHJpbnQnO1xuXG4vLyBDcmVhdGUgYSBTdXBhYmFzZSBjbGllbnQgd2l0aCB0aGUgc2VydmljZSByb2xlIGtleSBmb3IgYWRtaW4gb3BlcmF0aW9uc1xuY29uc3Qgc2VydmljZVJvbGVLZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZO1xuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KFxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhLFxuICBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSFcbik7XG5cbi8vIENyZWF0ZSBhIHNlcGFyYXRlIGNsaWVudCB3aXRoIHNlcnZpY2Ugcm9sZSBmb3Igc2Vzc2lvbiBtYW5hZ2VtZW50XG5leHBvcnQgY29uc3QgYWRtaW5TdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcbiAgc2VydmljZVJvbGVLZXkhLFxuICB7XG4gICAgYXV0aDoge1xuICAgICAgYXV0b1JlZnJlc2hUb2tlbjogZmFsc2UsXG4gICAgICBwZXJzaXN0U2Vzc2lvbjogZmFsc2VcbiAgICB9XG4gIH1cbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclNlc3Npb24ge1xuICB1c2VybmFtZTogc3RyaW5nO1xuICBpc0xvZ2dlZEluOiBib29sZWFuO1xuICB0b2tlbkV4cGlyeT86IHN0cmluZztcbiAgdG9rZW4/OiBzdHJpbmcgfCBudWxsO1xuICBpc0FkbWluPzogYm9vbGVhbjtcbiAgZGV2aWNlRmluZ2VycHJpbnQ/OiBzdHJpbmc7XG4gIHVzZXJJZD86IHN0cmluZztcbiAgc2Vzc2lvbklkPzogc3RyaW5nO1xufVxuXG4vLyBGdW5jdGlvbiB0byBjcmVhdGUgYSBuZXcgc2Vzc2lvblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbih1c2VySWQ6IHN0cmluZywgZGV2aWNlRmluZ2VycHJpbnQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIG5ldyBzZXNzaW9uIGZvciB1c2VyOicsIHVzZXJJZCk7XG4gICAgY29uc3Qgc2Vzc2lvbklkID0gdXVpZHY0KCk7XG5cbiAgICAvLyBGaXJzdCwgZGVhY3RpdmF0ZSBhbnkgZXhpc3Rpbmcgc2Vzc2lvbnMgdXNpbmcgYWRtaW4gY2xpZW50XG4gICAgY29uc3QgeyBlcnJvcjogZGVhY3RpdmF0ZUVycm9yIH0gPSBhd2FpdCBhZG1pblN1cGFiYXNlXG4gICAgICAuZnJvbSgnc2Vzc2lvbnMnKVxuICAgICAgLnVwZGF0ZSh7IGlzX2FjdGl2ZTogZmFsc2UgfSlcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZClcbiAgICAgIC5lcSgnaXNfYWN0aXZlJywgdHJ1ZSk7XG5cbiAgICBpZiAoZGVhY3RpdmF0ZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkZWFjdGl2YXRpbmcgZXhpc3Rpbmcgc2Vzc2lvbnM6JywgZGVhY3RpdmF0ZUVycm9yKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbmV3IHNlc3Npb24gdXNpbmcgYWRtaW4gY2xpZW50XG4gICAgY29uc3QgeyBlcnJvcjogY3JlYXRlRXJyb3IgfSA9IGF3YWl0IGFkbWluU3VwYWJhc2VcbiAgICAgIC5mcm9tKCdzZXNzaW9ucycpXG4gICAgICAuaW5zZXJ0KFt7XG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgc2Vzc2lvbl9pZDogc2Vzc2lvbklkLFxuICAgICAgICBkZXZpY2VfZmluZ2VycHJpbnQ6IGRldmljZUZpbmdlcnByaW50LFxuICAgICAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgbGFzdF9hY3RpdmU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfV0pO1xuXG4gICAgaWYgKGNyZWF0ZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBzZXNzaW9uOicsIGNyZWF0ZUVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBzZXNzaW9uJyk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBjcmVhdGVkIHNlc3Npb24gd2l0aCBJRDonLCBzZXNzaW9uSWQpO1xuICAgIHJldHVybiBzZXNzaW9uSWQ7XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdTZXNzaW9uIGNyZWF0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBGdW5jdGlvbiB0byBjaGVjayBpZiB1c2VyIGhhcyBhbiBhY3RpdmUgc2Vzc2lvblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBY3RpdmVTZXNzaW9uKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IHsgZGF0YTogc2Vzc2lvbnMsIGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgIC5mcm9tKCdzZXNzaW9ucycpXG4gICAgLnNlbGVjdCgnKicpXG4gICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKVxuICAgIC5lcSgnaXNfYWN0aXZlJywgdHJ1ZSlcbiAgICAuc2luZ2xlKCk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgYWN0aXZlIHNlc3Npb246JywgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAhIXNlc3Npb25zO1xufVxuXG4vLyBGdW5jdGlvbiB0byB2YWxpZGF0ZSBzZXNzaW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVTZXNzaW9uKHNlc3Npb25JZDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdWYWxpZGF0aW5nIHNlc3Npb246JywgeyBzZXNzaW9uSWQsIHVzZXJJZCB9KTtcbiAgICBcbiAgICAvLyBVc2UgYWRtaW4gY2xpZW50IGZvciBzZXNzaW9uIHZhbGlkYXRpb25cbiAgICBjb25zdCB7IGRhdGE6IHNlc3Npb24sIGVycm9yIH0gPSBhd2FpdCBhZG1pblN1cGFiYXNlXG4gICAgICAuZnJvbSgnc2Vzc2lvbnMnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3Nlc3Npb25faWQnLCBzZXNzaW9uSWQpXG4gICAgICAuZXEoJ3VzZXJfaWQnLCB1c2VySWQpXG4gICAgICAuZXEoJ2lzX2FjdGl2ZScsIHRydWUpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Nlc3Npb24gdmFsaWRhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICBjb25zb2xlLmxvZygnTm8gYWN0aXZlIHNlc3Npb24gZm91bmQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnRm91bmQgYWN0aXZlIHNlc3Npb246Jywgc2Vzc2lvbik7XG5cbiAgICAvLyBVcGRhdGUgbGFzdF9hY3RpdmUgdGltZXN0YW1wIHVzaW5nIGFkbWluIGNsaWVudFxuICAgIGNvbnN0IHsgZXJyb3I6IHVwZGF0ZUVycm9yIH0gPSBhd2FpdCBhZG1pblN1cGFiYXNlXG4gICAgICAuZnJvbSgnc2Vzc2lvbnMnKVxuICAgICAgLnVwZGF0ZSh7IGxhc3RfYWN0aXZlOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkgfSlcbiAgICAgIC5lcSgnc2Vzc2lvbl9pZCcsIHNlc3Npb25JZClcbiAgICAgIC5lcSgndXNlcl9pZCcsIHVzZXJJZCk7XG5cbiAgICBpZiAodXBkYXRlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGxhc3RfYWN0aXZlOicsIHVwZGF0ZUVycm9yKTtcbiAgICAgIC8vIERvbid0IGZhaWwgdmFsaWRhdGlvbiBqdXN0IGJlY2F1c2Ugd2UgY291bGRuJ3QgdXBkYXRlIHRpbWVzdGFtcFxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IgaW4gdmFsaWRhdGVTZXNzaW9uOicsIGVycm9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gdG8gZW5kIHNlc3Npb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmRTZXNzaW9uKHNlc3Npb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGF3YWl0IGFkbWluU3VwYWJhc2VcbiAgICAuZnJvbSgnc2Vzc2lvbnMnKVxuICAgIC51cGRhdGUoeyBpc19hY3RpdmU6IGZhbHNlIH0pXG4gICAgLmVxKCdzZXNzaW9uX2lkJywgc2Vzc2lvbklkKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25Jbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyU2Vzc2lvbj4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBzaWduIGluIHByb2Nlc3MgZm9yIHVzZXJuYW1lOicsIHVzZXJuYW1lKTtcblxuICAgIC8vIEdldCBjdXJyZW50IGRldmljZSBmaW5nZXJwcmludFxuICAgIGNvbnN0IGRldmljZUZpbmdlcnByaW50ID0gYXdhaXQgZ2V0RGV2aWNlRmluZ2VycHJpbnQoKTtcbiAgICBjb25zb2xlLmxvZygnRGV2aWNlIGZpbmdlcnByaW50OicsIGRldmljZUZpbmdlcnByaW50KTtcblxuICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYW4gYWRtaW4gbG9naW4gYXR0ZW1wdFxuICAgIGlmICh1c2VybmFtZSA9PT0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQURNSU5fVVNFUk5BTUUpIHtcbiAgICAgIGlmIChwYXNzd29yZCA9PT0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQURNSU5fUEFTU1dPUkQpIHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gdXVpZHY0KCk7XG4gICAgICAgIGNvbnN0IGFkbWluU2Vzc2lvbjogVXNlclNlc3Npb24gPSB7XG4gICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgIGlzTG9nZ2VkSW46IHRydWUsXG4gICAgICAgICAgaXNBZG1pbjogdHJ1ZSxcbiAgICAgICAgICBkZXZpY2VGaW5nZXJwcmludCxcbiAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgdXNlcklkOiAnYWRtaW4nIC8vIFNwZWNpYWwgY2FzZSBmb3IgYWRtaW5cbiAgICAgICAgfTtcbiAgICAgICAgc2F2ZVNlc3Npb24oYWRtaW5TZXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIGFkbWluU2Vzc2lvbjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB1c2VybmFtZSBvciBwYXNzd29yZCcpO1xuICAgIH1cblxuICAgIC8vIE5vcm1hbCB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICAgY29uc3QgeyBkYXRhOiB1c2VyRGF0YSwgZXJyb3I6IHVzZXJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAuc2VsZWN0KCcqJylcbiAgICAgIC5lcSgndXNlcm5hbWUnLCB1c2VybmFtZSlcbiAgICAgIC5zaW5nbGUoKTtcblxuICAgIGlmICh1c2VyRXJyb3IgfHwgIXVzZXJEYXRhKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdVc2VyIGxvb2t1cCBlcnJvcjonLCB1c2VyRXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHVzZXJuYW1lIG9yIHBhc3N3b3JkJyk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG5ldyBzZXNzaW9uXG4gICAgbGV0IHNlc3Npb25JZDogc3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uSWQgPSBhd2FpdCBjcmVhdGVTZXNzaW9uKHVzZXJEYXRhLmlkLCBkZXZpY2VGaW5nZXJwcmludCk7XG4gICAgICBjb25zb2xlLmxvZygnQ3JlYXRlZCBuZXcgc2Vzc2lvbjonLCBzZXNzaW9uSWQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHNlc3Npb246JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHNlc3Npb24uIFBsZWFzZSB0cnkgYWdhaW4uJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdXNlclNlc3Npb246IFVzZXJTZXNzaW9uID0ge1xuICAgICAgdXNlcm5hbWU6IHVzZXJEYXRhLnVzZXJuYW1lLFxuICAgICAgdXNlcklkOiB1c2VyRGF0YS5pZCxcbiAgICAgIGlzTG9nZ2VkSW46IHRydWUsXG4gICAgICBzZXNzaW9uSWQsXG4gICAgICB0b2tlbjogdXNlckRhdGEudG9rZW4sXG4gICAgICBkZXZpY2VGaW5nZXJwcmludCxcbiAgICAgIGlzQWRtaW46IGZhbHNlXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdTYXZpbmcgdXNlciBzZXNzaW9uOicsIHsgLi4udXNlclNlc3Npb24sIHRva2VuOiAnW1JFREFDVEVEXScgfSk7XG4gICAgc2F2ZVNlc3Npb24odXNlclNlc3Npb24pO1xuICAgIHJldHVybiB1c2VyU2Vzc2lvbjtcblxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignU2lnbiBpbiBlcnJvcjonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25VcCh1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgc2lnbiB1cCBwcm9jZXNzIGZvciB1c2VybmFtZTonLCB1c2VybmFtZSk7XG5cbiAgICAvLyBHZXQgZGV2aWNlIGZpbmdlcnByaW50XG4gICAgY29uc3QgZGV2aWNlRmluZ2VycHJpbnQgPSBhd2FpdCBnZXREZXZpY2VGaW5nZXJwcmludCgpO1xuICAgIGNvbnNvbGUubG9nKCdHZW5lcmF0ZWQgZGV2aWNlIGZpbmdlcnByaW50OicsIGRldmljZUZpbmdlcnByaW50KTtcblxuICAgIC8vIENoZWNrIGlmIHVzZXJuYW1lIGFscmVhZHkgZXhpc3RzXG4gICAgY29uc3QgeyBkYXRhOiBleGlzdGluZ1VzZXIsIGVycm9yOiB1c2VyQ2hlY2tFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAuc2VsZWN0KCd1c2VybmFtZScpXG4gICAgICAuZXEoJ3VzZXJuYW1lJywgdXNlcm5hbWUpXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAodXNlckNoZWNrRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIGV4aXN0aW5nIHVzZXI6JywgdXNlckNoZWNrRXJyb3IpO1xuICAgIH1cblxuICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlcm5hbWUgYWxyZWFkeSBleGlzdHMnKTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZnkgdG9rZW4gZXhpc3RzIGFuZCBnZXQgZXhwaXJ5IGRhdGVcbiAgICBjb25zdCB7IGRhdGE6IHRva2VuRGF0YSwgZXJyb3I6IHRva2VuRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndG9rZW5zJylcbiAgICAgIC5zZWxlY3QoJyonKVxuICAgICAgLmVxKCd0b2tlbicsIHRva2VuKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKHRva2VuRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Rva2VuIHZlcmlmaWNhdGlvbiBlcnJvcjonLCB0b2tlbkVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbicpO1xuICAgIH1cblxuICAgIGlmICghdG9rZW5EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdG9rZW4nKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0b2tlbiBpcyBhbHJlYWR5IHVzZWRcbiAgICBpZiAodG9rZW5EYXRhLmlzX3VzZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9rZW4gaGFzIGFscmVhZHkgYmVlbiB1c2VkJyk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG5ldyB1c2VyIHdpdGggZGV2aWNlIGZpbmdlcnByaW50XG4gICAgY29uc3QgbmV3VXNlckRhdGEgPSB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgdG9rZW4sXG4gICAgICBkZXZpY2VfZmluZ2VycHJpbnQ6IGRldmljZUZpbmdlcnByaW50LFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgdG9rZW5fZXhwaXJ5OiB0b2tlbkRhdGEuZXhwaXJ5X2RhdGVcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ0F0dGVtcHRpbmcgdG8gY3JlYXRlIHVzZXIgd2l0aCBkYXRhOicsIHsgXG4gICAgICAuLi5uZXdVc2VyRGF0YSxcbiAgICAgIHBhc3N3b3JkOiAnW1JFREFDVEVEXScsXG4gICAgICB0b2tlbjogJ1tSRURBQ1RFRF0nXG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGRhdGE6IG5ld1VzZXIsIGVycm9yOiBjcmVhdGVFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAuaW5zZXJ0KFtuZXdVc2VyRGF0YV0pXG4gICAgICAuc2VsZWN0KClcbiAgICAgIC5zaW5nbGUoKTtcblxuICAgIGlmIChjcmVhdGVFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGV0YWlsZWQgZXJyb3IgY3JlYXRpbmcgdXNlcjonLCB7XG4gICAgICAgIG1lc3NhZ2U6IGNyZWF0ZUVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGRldGFpbHM6IGNyZWF0ZUVycm9yLmRldGFpbHMsXG4gICAgICAgIGhpbnQ6IGNyZWF0ZUVycm9yLmhpbnQsXG4gICAgICAgIGNvZGU6IGNyZWF0ZUVycm9yLmNvZGVcbiAgICAgIH0pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIHVzZXIgYWNjb3VudDogJHtjcmVhdGVFcnJvci5tZXNzYWdlfWApO1xuICAgIH1cblxuICAgIC8vIE1hcmsgdG9rZW4gYXMgdXNlZFxuICAgIGNvbnN0IHsgZXJyb3I6IHVwZGF0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3Rva2VucycpXG4gICAgICAudXBkYXRlKHsgXG4gICAgICAgIGlzX3VzZWQ6IHRydWUsXG4gICAgICAgIHVzZWRfYnk6IHVzZXJuYW1lXG4gICAgICB9KVxuICAgICAgLmVxKCd0b2tlbicsIHRva2VuKTtcblxuICAgIGlmICh1cGRhdGVFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgdG9rZW4gc3RhdHVzOicsIHVwZGF0ZUVycm9yKTtcbiAgICAgIC8vIENvbnNpZGVyIHJvbGxpbmcgYmFjayB1c2VyIGNyZWF0aW9uIGhlcmVcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGNyZWF0ZWQgdXNlcjonLCB7IFxuICAgICAgLi4ubmV3VXNlcixcbiAgICAgIHBhc3N3b3JkOiAnW1JFREFDVEVEXScsXG4gICAgICB0b2tlbjogJ1tSRURBQ1RFRF0nXG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdXNlcjogbmV3VXNlcixcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcblxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignU2lnbiB1cCBlcnJvcjonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNpZ25PdXQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGdldFNlc3Npb24oKTtcbiAgICBpZiAoc2Vzc2lvbj8uc2Vzc2lvbklkICYmIHNlc3Npb24/LnVzZXJJZCkge1xuICAgICAgLy8gVXNlIGFkbWluIGNsaWVudCBmb3Igc2Vzc2lvbiB0ZXJtaW5hdGlvblxuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgYWRtaW5TdXBhYmFzZVxuICAgICAgICAuZnJvbSgnc2Vzc2lvbnMnKVxuICAgICAgICAudXBkYXRlKHsgaXNfYWN0aXZlOiBmYWxzZSB9KVxuICAgICAgICAuZXEoJ3Nlc3Npb25faWQnLCBzZXNzaW9uLnNlc3Npb25JZClcbiAgICAgICAgLmVxKCd1c2VyX2lkJywgc2Vzc2lvbi51c2VySWQpO1xuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZW5kaW5nIHNlc3Npb246JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2lnbiBvdXQ6JywgZXJyb3IpO1xuICB9IGZpbmFsbHkge1xuICAgIGNsZWFyU2Vzc2lvbigpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlU2Vzc2lvbih1c2VyOiBVc2VyU2Vzc2lvbikge1xuICB0cnkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZXNzaW9uJywgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Vzc2lvbigpOiBVc2VyU2Vzc2lvbiB8IG51bGwge1xuICB0cnkge1xuICAgIGNvbnN0IHNlc3Npb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Vzc2lvbicpO1xuICAgIGlmICghc2Vzc2lvbikgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc2Vzc2lvbik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVhZGluZyBzZXNzaW9uOicsIGVycm9yKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJTZXNzaW9uKCkge1xuICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2Vzc2lvbicpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tTZXNzaW9uKCkge1xuICBjb25zdCBzZXNzaW9uID0gZ2V0U2Vzc2lvbigpO1xuICBpZiAoIXNlc3Npb24gfHwgIXNlc3Npb24uaXNMb2dnZWRJbikgcmV0dXJuIG51bGw7XG5cbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhbiBhZG1pbiBzZXNzaW9uXG4gIGlmIChzZXNzaW9uLmlzQWRtaW4pIHtcbiAgICBpZiAoc2Vzc2lvbi51c2VybmFtZSA9PT0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQURNSU5fVVNFUk5BTUUpIHtcbiAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cbiAgICBjbGVhclNlc3Npb24oKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gR2V0IHVzZXIgZGF0YVxuICAgIGNvbnN0IHsgZGF0YTogdXNlckRhdGEsIGVycm9yOiB1c2VyRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgndXNlcnMnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3VzZXJuYW1lJywgc2Vzc2lvbi51c2VybmFtZSlcbiAgICAgIC5zaW5nbGUoKTtcblxuICAgIGlmICh1c2VyRXJyb3IgfHwgIXVzZXJEYXRhKSB7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgb3IgYWNjZXNzIHJldm9rZWQnKTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdG9rZW4gZGF0YVxuICAgIGNvbnN0IHsgZGF0YTogdG9rZW5EYXRhLCBlcnJvcjogdG9rZW5FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd0b2tlbnMnKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ3Rva2VuJywgdXNlckRhdGEudG9rZW4pXG4gICAgICAuc2luZ2xlKCk7XG5cbiAgICBpZiAodG9rZW5FcnJvciB8fCAhdG9rZW5EYXRhKSB7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0b2tlbi4gUGxlYXNlIGNvbnRhY3QgYWRtaW4uJyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdG9rZW4gaXMgZXhwaXJlZFxuICAgIGNvbnN0IGV4cGlyeURhdGUgPSBuZXcgRGF0ZSh0b2tlbkRhdGEuZXhwaXJ5X2RhdGUpO1xuICAgIGlmIChleHBpcnlEYXRlIDwgbmV3IERhdGUoKSkge1xuICAgICAgY2xlYXJTZXNzaW9uKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgYWNjZXNzIHRva2VuIGhhcyBleHBpcmVkLiBQbGVhc2UgY29udGFjdCBhZG1pbiBmb3IgcmVuZXdhbC4nKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0b2tlbiBpcyBzdGlsbCBhY3RpdmVcbiAgICBpZiAoIXRva2VuRGF0YS5pc191c2VkKSB7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91ciB0b2tlbiBoYXMgYmVlbiBkZWFjdGl2YXRlZC4gUGxlYXNlIGNvbnRhY3QgYWRtaW4gdG8gcmVhY3RpdmF0ZS4nKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBzZXNzaW9uXG4gICAgaWYgKCFzZXNzaW9uLnNlc3Npb25JZCB8fCAhc2Vzc2lvbi51c2VySWQpIHtcbiAgICAgIGNsZWFyU2Vzc2lvbigpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNlc3Npb24gZGF0YS4gUGxlYXNlIHNpZ24gaW4gYWdhaW4uJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNWYWxpZFNlc3Npb24gPSBhd2FpdCB2YWxpZGF0ZVNlc3Npb24oc2Vzc2lvbi5zZXNzaW9uSWQsIHNlc3Npb24udXNlcklkKTtcbiAgICBpZiAoIWlzVmFsaWRTZXNzaW9uKSB7XG4gICAgICBjbGVhclNlc3Npb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXNzaW9uLiBQbGVhc2Ugc2lnbiBpbiBhZ2Fpbi4nKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gdGhlIGNvbXBsZXRlIHNlc3Npb24gZGF0YVxuICAgIHJldHVybiB7XG4gICAgICB1c2VybmFtZTogc2Vzc2lvbi51c2VybmFtZSxcbiAgICAgIHVzZXJJZDogc2Vzc2lvbi51c2VySWQsXG4gICAgICBpc0xvZ2dlZEluOiB0cnVlLFxuICAgICAgaXNBZG1pbjogZmFsc2UsXG4gICAgICB0b2tlbjogdXNlckRhdGEudG9rZW4sXG4gICAgICBzZXNzaW9uSWQ6IHNlc3Npb24uc2Vzc2lvbklkLFxuICAgICAgZGV2aWNlRmluZ2VycHJpbnQ6IHNlc3Npb24uZGV2aWNlRmluZ2VycHJpbnRcbiAgICB9O1xuXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAvLyBDbGVhciBzZXNzaW9uIGZvciBhbnkgYXV0aGVudGljYXRpb24tcmVsYXRlZCBlcnJvcnNcbiAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygndG9rZW4nKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdhY2Nlc3MnKSB8fCBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdzZXNzaW9uJykpIHtcbiAgICAgIGNsZWFyU2Vzc2lvbigpO1xuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUb2tlbihkdXJhdGlvbjogc3RyaW5nID0gJzFoJyk6IHN0cmluZyB7XG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIHRva2VuIHVzaW5nIFVVSURcbiAgcmV0dXJuIHV1aWR2NCgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QWRtaW4oKTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGNvbnN0IGFkbWluU2Vzc2lvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhZG1pblNlc3Npb24nKTtcbiAgaWYgKCFhZG1pblNlc3Npb24pIHJldHVybiBmYWxzZTtcblxuICB0cnkge1xuICAgIGNvbnN0IHNlc3Npb24gPSBKU09OLnBhcnNlKGFkbWluU2Vzc2lvbik7XG4gICAgcmV0dXJuIHNlc3Npb24udXNlcm5hbWUgPT09IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FETUlOX1VTRVJOQU1FICYmIHNlc3Npb24uaXNMb2dnZWRJbiA9PT0gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciB2ZXJpZnlpbmcgYWRtaW4gc2Vzc2lvbjonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwidjQiLCJ1dWlkdjQiLCJnZXREZXZpY2VGaW5nZXJwcmludCIsInNlcnZpY2VSb2xlS2V5IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJzdXBhYmFzZSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIiwiYWRtaW5TdXBhYmFzZSIsImF1dGgiLCJhdXRvUmVmcmVzaFRva2VuIiwicGVyc2lzdFNlc3Npb24iLCJjcmVhdGVTZXNzaW9uIiwidXNlcklkIiwiZGV2aWNlRmluZ2VycHJpbnQiLCJjb25zb2xlIiwibG9nIiwic2Vzc2lvbklkIiwiZXJyb3IiLCJkZWFjdGl2YXRlRXJyb3IiLCJmcm9tIiwidXBkYXRlIiwiaXNfYWN0aXZlIiwiZXEiLCJjcmVhdGVFcnJvciIsImluc2VydCIsInVzZXJfaWQiLCJzZXNzaW9uX2lkIiwiZGV2aWNlX2ZpbmdlcnByaW50IiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImxhc3RfYWN0aXZlIiwiRXJyb3IiLCJjaGVja0FjdGl2ZVNlc3Npb24iLCJkYXRhIiwic2Vzc2lvbnMiLCJzZWxlY3QiLCJzaW5nbGUiLCJ2YWxpZGF0ZVNlc3Npb24iLCJzZXNzaW9uIiwidXBkYXRlRXJyb3IiLCJlbmRTZXNzaW9uIiwic2lnbkluIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIk5FWFRfUFVCTElDX0FETUlOX1VTRVJOQU1FIiwiTkVYVF9QVUJMSUNfQURNSU5fUEFTU1dPUkQiLCJhZG1pblNlc3Npb24iLCJpc0xvZ2dlZEluIiwiaXNBZG1pbiIsInNhdmVTZXNzaW9uIiwidXNlckRhdGEiLCJ1c2VyRXJyb3IiLCJpZCIsInVzZXJTZXNzaW9uIiwidG9rZW4iLCJzaWduVXAiLCJleGlzdGluZ1VzZXIiLCJ1c2VyQ2hlY2tFcnJvciIsInRva2VuRGF0YSIsInRva2VuRXJyb3IiLCJpc191c2VkIiwibmV3VXNlckRhdGEiLCJ0b2tlbl9leHBpcnkiLCJleHBpcnlfZGF0ZSIsIm5ld1VzZXIiLCJtZXNzYWdlIiwiZGV0YWlscyIsImhpbnQiLCJjb2RlIiwidXNlZF9ieSIsInVzZXIiLCJzaWduT3V0IiwiZ2V0U2Vzc2lvbiIsImNsZWFyU2Vzc2lvbiIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0SXRlbSIsInBhcnNlIiwicmVtb3ZlSXRlbSIsImNoZWNrU2Vzc2lvbiIsImV4cGlyeURhdGUiLCJpc1ZhbGlkU2Vzc2lvbiIsImluY2x1ZGVzIiwiZ2VuZXJhdGVUb2tlbiIsImR1cmF0aW9uIiwidmVyaWZ5QWRtaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/auth.ts\n"));

/***/ })

});