"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/signup/page",{

/***/ "(app-pages-browser)/./src/utils/auth.ts":
/*!***************************!*\
  !*** ./src/utils/auth.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminSupabase: function() { return /* binding */ adminSupabase; },\n/* harmony export */   checkSession: function() { return /* binding */ checkSession; },\n/* harmony export */   clearSession: function() { return /* binding */ clearSession; },\n/* harmony export */   endSession: function() { return /* binding */ endSession; },\n/* harmony export */   generateToken: function() { return /* binding */ generateToken; },\n/* harmony export */   getSession: function() { return /* binding */ getSession; },\n/* harmony export */   saveSession: function() { return /* binding */ saveSession; },\n/* harmony export */   signIn: function() { return /* binding */ signIn; },\n/* harmony export */   signOut: function() { return /* binding */ signOut; },\n/* harmony export */   signUp: function() { return /* binding */ signUp; },\n/* harmony export */   supabase: function() { return /* binding */ supabase; },\n/* harmony export */   validateSession: function() { return /* binding */ validateSession; },\n/* harmony export */   verifyAdmin: function() { return /* binding */ verifyAdmin; }\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var _fingerprint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fingerprint */ \"(app-pages-browser)/./src/utils/fingerprint.ts\");\n\n\n\n// Create a Supabase client with the service role key for admin operations\nconst serviceRoleKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjeHh2bmljemx5enl1bXVpb2hjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczMjM1MDMwMywiZXhwIjoyMDQ3OTI2MzAzfQ.50LNYYbfszw6IzHma3S6SIL53ZGFfVpj0Ty1x3ycj0o\";\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://scxxvniczlyzyumuiohc.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjeHh2bmljemx5enl1bXVpb2hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzIzNTAzMDMsImV4cCI6MjA0NzkyNjMwM30.AM5S6xAISMEH41V7pLsJSznd-b2hiene5ZGOClgZh-4\");\n// Create a separate client with service role for session management\nconst adminSupabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://scxxvniczlyzyumuiohc.supabase.co\", serviceRoleKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Function to create a new session\nasync function createSession(userId, deviceFingerprint) {\n    try {\n        console.log(\"Creating new session for user:\", userId);\n        const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        // First, deactivate any existing sessions using admin client\n        const { error: deactivateError } = await adminSupabase.from(\"sessions\").update({\n            is_active: false\n        }).eq(\"user_id\", userId).eq(\"is_active\", true);\n        if (deactivateError) {\n            console.error(\"Error deactivating existing sessions:\", deactivateError);\n        }\n        // Create new session using admin client\n        const { error: createError } = await adminSupabase.from(\"sessions\").insert([\n            {\n                user_id: userId,\n                session_id: sessionId,\n                device_fingerprint: deviceFingerprint,\n                is_active: true,\n                created_at: new Date().toISOString(),\n                last_active: new Date().toISOString()\n            }\n        ]);\n        if (createError) {\n            console.error(\"Error creating session:\", createError);\n            throw new Error(\"Failed to create session\");\n        }\n        console.log(\"Successfully created session with ID:\", sessionId);\n        return sessionId;\n    } catch (error) {\n        console.error(\"Session creation error:\", error);\n        throw error;\n    }\n}\n// Function to check if user has an active session\nasync function checkActiveSession(userId) {\n    const { data: sessions, error } = await supabase.from(\"sessions\").select(\"*\").eq(\"user_id\", userId).eq(\"is_active\", true).single();\n    if (error) {\n        console.error(\"Error checking active session:\", error);\n        return false;\n    }\n    return !!sessions;\n}\n// Function to validate session\nasync function validateSession(sessionId, userId) {\n    try {\n        console.log(\"Validating session:\", {\n            sessionId,\n            userId\n        });\n        // Get current device fingerprint\n        const deviceFingerprint = await (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.getDeviceFingerprint)();\n        // Use admin client for session validation\n        const { data: session, error } = await adminSupabase.from(\"sessions\").select(\"*\").eq(\"session_id\", sessionId).eq(\"user_id\", userId).eq(\"is_active\", true).single();\n        if (error) {\n            console.error(\"Session validation error:\", error);\n            return false;\n        }\n        if (!session) {\n            console.log(\"No active session found\");\n            return false;\n        }\n        // Verify device fingerprint matches\n        if (session.device_fingerprint !== deviceFingerprint) {\n            console.log(\"Device fingerprint mismatch\");\n            // Deactivate this session since it's being accessed from a different browser\n            await adminSupabase.from(\"sessions\").update({\n                is_active: false\n            }).eq(\"session_id\", sessionId);\n            return false;\n        }\n        console.log(\"Found active session:\", session);\n        // Update last_active timestamp using admin client\n        const { error: updateError } = await adminSupabase.from(\"sessions\").update({\n            last_active: new Date().toISOString()\n        }).eq(\"session_id\", sessionId);\n        if (updateError) {\n            console.error(\"Error updating last_active:\", updateError);\n        // Don't fail validation just because we couldn't update timestamp\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Unexpected error in validateSession:\", error);\n        return false;\n    }\n}\n// Function to end session\nasync function endSession(sessionId) {\n    await adminSupabase.from(\"sessions\").update({\n        is_active: false\n    }).eq(\"session_id\", sessionId);\n}\nasync function signIn(username, password) {\n    try {\n        console.log(\"Starting sign in process for username:\", username);\n        // Get current device fingerprint\n        const deviceFingerprint = await (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.getDeviceFingerprint)();\n        console.log(\"Device fingerprint:\", deviceFingerprint);\n        // Check if this is an admin login attempt\n        if (username === \"Bharani\") {\n            if (password === \"HackerBharani\") {\n                const sessionId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n                const adminSession = {\n                    username: username,\n                    isLoggedIn: true,\n                    isAdmin: true,\n                    deviceFingerprint,\n                    sessionId,\n                    userId: \"admin\" // Special case for admin\n                };\n                saveSession(adminSession);\n                return adminSession;\n            }\n            throw new Error(\"Invalid username or password\");\n        }\n        // Normal user authentication\n        const { data: userData, error: userError } = await supabase.from(\"users\").select(\"*\").eq(\"username\", username).single();\n        if (userError || !userData) {\n            console.error(\"User lookup error:\", userError);\n            throw new Error(\"Invalid username or password\");\n        }\n        // Check for existing active sessions\n        const { data: existingSessions, error: sessionError } = await adminSupabase.from(\"sessions\").select(\"*\").eq(\"user_id\", userData.id).eq(\"is_active\", true);\n        if (sessionError) {\n            console.error(\"Error checking existing sessions:\", sessionError);\n        } else if (existingSessions && existingSessions.length > 0) {\n            const currentSession = existingSessions[0];\n            if (currentSession.device_fingerprint !== deviceFingerprint) {\n                throw new Error(\"You are already logged in from another browser. Please sign out there first.\");\n            }\n        }\n        // Create new session\n        let sessionId;\n        try {\n            sessionId = await createSession(userData.id, deviceFingerprint);\n            console.log(\"Created new session:\", sessionId);\n        } catch (error) {\n            console.error(\"Failed to create session:\", error);\n            throw new Error(\"Failed to create session. Please try again.\");\n        }\n        const userSession = {\n            username: userData.username,\n            userId: userData.id,\n            isLoggedIn: true,\n            sessionId,\n            token: userData.token,\n            deviceFingerprint,\n            tokenExpiry: userData.token_expiry\n        };\n        saveSession(userSession);\n        return userSession;\n    } catch (error) {\n        console.error(\"Sign in error:\", error);\n        throw error;\n    }\n}\nasync function signUp(username, password, token) {\n    try {\n        console.log(\"Starting sign up process for username:\", username);\n        // Get device fingerprint\n        const deviceFingerprint = await (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.getDeviceFingerprint)();\n        console.log(\"Generated device fingerprint:\", deviceFingerprint);\n        // Check if username already exists\n        const { data: existingUser, error: userCheckError } = await supabase.from(\"users\").select(\"username\").eq(\"username\", username).single();\n        if (userCheckError) {\n            console.error(\"Error checking existing user:\", userCheckError);\n        }\n        if (existingUser) {\n            throw new Error(\"Username already exists\");\n        }\n        // Verify token exists and get expiry date\n        const { data: tokenData, error: tokenError } = await supabase.from(\"tokens\").select(\"*\").eq(\"token\", token).single();\n        if (tokenError) {\n            console.error(\"Token verification error:\", tokenError);\n            throw new Error(\"Invalid token\");\n        }\n        if (!tokenData) {\n            throw new Error(\"Invalid token\");\n        }\n        // Check if token is already used\n        if (tokenData.is_used) {\n            throw new Error(\"Token has already been used\");\n        }\n        // Create new user with device fingerprint\n        const newUserData = {\n            username,\n            password,\n            token,\n            device_fingerprint: deviceFingerprint,\n            created_at: new Date().toISOString(),\n            token_expiry: tokenData.expiry_date\n        };\n        console.log(\"Attempting to create user with data:\", {\n            ...newUserData,\n            password: \"[REDACTED]\",\n            token: \"[REDACTED]\"\n        });\n        const { data: newUser, error: createError } = await supabase.from(\"users\").insert([\n            newUserData\n        ]).select().single();\n        if (createError) {\n            console.error(\"Detailed error creating user:\", {\n                message: createError.message,\n                details: createError.details,\n                hint: createError.hint,\n                code: createError.code\n            });\n            throw new Error(\"Failed to create user account: \".concat(createError.message));\n        }\n        // Mark token as used\n        const { error: updateError } = await supabase.from(\"tokens\").update({\n            is_used: true,\n            used_by: username\n        }).eq(\"token\", token);\n        if (updateError) {\n            console.error(\"Error updating token status:\", updateError);\n        // Consider rolling back user creation here\n        }\n        console.log(\"Successfully created user:\", {\n            ...newUser,\n            password: \"[REDACTED]\",\n            token: \"[REDACTED]\"\n        });\n        return {\n            user: newUser,\n            error: null\n        };\n    } catch (error) {\n        console.error(\"Sign up error:\", error);\n        throw error;\n    }\n}\nasync function signOut() {\n    try {\n        const session = getSession();\n        if ((session === null || session === void 0 ? void 0 : session.sessionId) && (session === null || session === void 0 ? void 0 : session.userId)) {\n            // Use admin client for session termination\n            const { error } = await adminSupabase.from(\"sessions\").update({\n                is_active: false\n            }).eq(\"session_id\", session.sessionId).eq(\"user_id\", session.userId);\n            if (error) {\n                console.error(\"Error ending session:\", error);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error during sign out:\", error);\n    } finally{\n        clearSession();\n    }\n}\nfunction saveSession(user) {\n    try {\n        localStorage.setItem(\"session\", JSON.stringify(user));\n    } catch (error) {\n        console.error(\"Error saving session:\", error);\n    }\n}\nfunction getSession() {\n    try {\n        const session = localStorage.getItem(\"session\");\n        if (!session) return null;\n        return JSON.parse(session);\n    } catch (error) {\n        console.error(\"Error reading session:\", error);\n        return null;\n    }\n}\nfunction clearSession() {\n    localStorage.removeItem(\"session\");\n}\nasync function checkSession() {\n    const session = getSession();\n    if (!session || !session.isLoggedIn) return null;\n    // Check if this is an admin session\n    if (session.isAdmin) {\n        if (session.username === \"Bharani\") {\n            return session;\n        }\n        clearSession();\n        return null;\n    }\n    try {\n        console.log(\"Checking session for user:\", session.username);\n        // Get user data\n        const { data: userData, error: userError } = await supabase.from(\"users\").select(\"*\").eq(\"username\", session.username).single();\n        if (userError) {\n            console.error(\"User lookup error:\", userError);\n            // Don't clear session immediately on network errors\n            if (userError.code !== \"PGRST116\") {\n                return session; // Keep session on temporary errors\n            }\n            clearSession();\n            throw new Error(\"Failed to verify user access\");\n        }\n        if (!userData) {\n            clearSession();\n            throw new Error(\"User not found or access revoked\");\n        }\n        // Get token data\n        const { data: tokenData, error: tokenError } = await supabase.from(\"tokens\").select(\"*\").eq(\"token\", userData.token).single();\n        if (tokenError) {\n            console.error(\"Token lookup error:\", tokenError);\n            // Don't clear session immediately on network errors\n            if (tokenError.code !== \"PGRST116\") {\n                return session; // Keep session on temporary errors\n            }\n        }\n        if (!tokenData) {\n            clearSession();\n            throw new Error(\"Invalid token. Please contact admin.\");\n        }\n        // Check if token is expired\n        const expiryDate = new Date(tokenData.expiry_date);\n        if (expiryDate < new Date()) {\n            clearSession();\n            throw new Error(\"Your access token has expired. Please contact admin for renewal.\");\n        }\n        // Check if token is still active\n        if (!tokenData.is_used) {\n            clearSession();\n            throw new Error(\"Your token has been deactivated. Please contact admin to reactivate.\");\n        }\n        // Validate session if we have the required data\n        if (session.sessionId && session.userId) {\n            const isValidSession = await validateSession(session.sessionId, session.userId);\n            if (!isValidSession) {\n                console.warn(\"Session validation failed, but keeping session active\");\n                // Instead of clearing immediately, we'll keep the session\n                return session;\n            }\n        }\n        // Update the session with latest data\n        const updatedSession = {\n            ...session,\n            username: userData.username,\n            userId: userData.id,\n            isLoggedIn: true,\n            isAdmin: false,\n            token: userData.token,\n            deviceFingerprint: session.deviceFingerprint\n        };\n        // Save the updated session\n        saveSession(updatedSession);\n        return updatedSession;\n    } catch (error) {\n        console.error(\"Session check error:\", error);\n        // Only clear session for specific authentication errors\n        if (error.message.includes(\"revoked\") || error.message.includes(\"expired\") || error.message.includes(\"deactivated\")) {\n            clearSession();\n        }\n        throw error;\n    }\n}\nfunction generateToken() {\n    let duration = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"1h\";\n    // Generate a unique token using UUID\n    return (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n}\nasync function verifyAdmin() {\n    const adminSession = localStorage.getItem(\"adminSession\");\n    if (!adminSession) return false;\n    try {\n        const session = JSON.parse(adminSession);\n        return session.username === \"Bharani\" && session.isLoggedIn === true;\n    } catch (error) {\n        console.error(\"Error verifying admin session:\", error);\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/auth.ts\n"));

/***/ })

});